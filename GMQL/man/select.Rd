% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Select.R
\name{select}
\alias{select}
\title{GMQL Operation: SELECT}
\usage{
select(input_data, predicate = NULL, region_predicate = NULL,
  semi_join = NULL, semi_join_dataset = NULL)
}
\arguments{
\item{input_data}{returned object from any GMQL function}

\item{predicate}{single string predicate made up by logical oepration: AND,OR,NOT on metadata attribute}

\item{region_predicate}{single string predicate made up by logical operation: AND,OR,NOT on schema region values}

\item{semi_join}{list of CONDITION objects every object contains the name of metadata to be used in semijoin,
or simple string concatenation c("cell_type","attribute_tag","size") without declaring condition.
In the latter form all metadata are considered having DEF condition
The CONDITION's available are:
\itemize{
\item{FULL: Fullname evaluation, two attributes match if they both end with value and,
if they have a further prefixes, the two prefix sequence are identical}
\item{DEF: Default evaluation, two attributes match if both end with value. }
\item{EXACT: Exact evaluation, only attributes exactly as value will match; no further prefixes are allowed. }
}
Every condition accepts only one string value. (e.g. DEF("cell_type") )}

\item{semi_join_dataset}{returned object from any GMQL function used in semijoin}
}
\value{
"url-like" string
}
\description{
It extracts a subset of samples from the input dataset.
It returns all the samples satisfying the predicate on metadata.
If regions are specified, returns regions satisfying the predicate on regions.
If semijoin clauses are specified they are applied, too.
When semijoin is defined, it extracts those samples containing all metadata attribute defined in semijoin clause
with at least one metadata value in common with semi join dataset
If no metadata in common beetween input dataset and semi join dataset, no sample is extracted
}
\examples{
\dontrun{

initGMQL("gtf")
test_path <- system.file("example","DATA_SET_VAR_GTF",package = "GMQL")
r = read(test_path)
c = cover(2,3,input_data = r)
s = select(input_data = r, "NOT(qValue > 0.001)", semi_join = list("cell_type",EXACT("cell")),
semi_join_dataset = c)
}

}
\references{
\url{http://www.bioinformatics.deib.polimi.it/genomic_computing/GMQL/doc/GMQLUserTutorial.pdf}
}
