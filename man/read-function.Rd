% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gmql_read.R
\name{read_dataset}
\alias{read_dataset}
\alias{read_dataset}
\alias{read}
\title{Function read}
\usage{
read_dataset(dataset, parser = "CustomParser", is_local = TRUE,
  is_GMQL = TRUE)

read(samples)
}
\arguments{
\item{dataset}{folder path for GMQL dataset or dataset name on repository}

\item{parser}{string used to parsing dataset files
The Parser's available are:
\itemize{
\item{ANNParser}
\item{BroadProjParser}
\item{NarrowPeakParser}
\item{RnaSeqParser}
\item{CustomParser.}
}
Default is CustomParser.}

\item{is_local}{logical value indicating local or remote dataset}

\item{is_GMQL}{logical value indicating GMQL dataset or not}

\item{samples}{GRangesList}
}
\value{
GMQLDataset object. It contains the value to use as input 
for the subsequent GMQLDataset method
}
\description{
It reads a GMQL dataset, as a folder containig some homogenus samples on 
disk or as a GrangesList; it saving in Scala memory in a way that can be 
referenced in R. It is also used to read a repository dataset in case of
remote processing.
}
\details{
Normally a GMQL dataset contains an XML schema file that contains
name of region attributes. (e.g chr, start, stop, strand)
The CustomParser reads this XML schema; 
if you already know what kind of schema your files have, use one of the 
parsers defined, without reading any XML schema.

If GRangesList has no metadata: i.e. metadata() is empty, two metadata are
generated.
\itemize{
\item{"provider" = "PoliMi"}
\item{"application" = "RGMQL"}
}
}
\examples{

## Thi statement initializes and runs the GMQL server for local execution 
## and creation of results on disk. Then, with system.file() it defines 
## the path to the folders "DATASET" in the subdirectory "example" 
## of the package "RGMQL" and opens such folder as a GMQL dataset 
## named "data"

init_gmql()
test_path <- system.file("example", "DATASET", package = "RGMQL")
data = read_dataset(test_path)

## This statement opens such folder as a GMQL dataset named "data" using 
## "NarrowPeakParser" 
dataPeak = read_dataset(test_path,"NarrowPeakParser")

## This statement reads a remote public dataset stored into GMQL system 
## repository. For a public dataset in a (remote) GMQL repository the 
## prefix "public." is needed before dataset name

data1 = read_dataset("public.Example_Dataset1",is_local = FALSE)

}
