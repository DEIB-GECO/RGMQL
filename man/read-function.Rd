% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gmql_read.R
\name{read}
\alias{read}
\alias{read_dataset}
\alias{read}
\title{GMQL Function: READ}
\usage{
read_dataset(dataset, parser = "CustomParser", is_local = TRUE,
  is_GMQL = TRUE)

read(samples)
}
\arguments{
\item{dataset}{folder path for GMQL dataset or datasetname on repository}

\item{parser}{string used to parsing dataset files
The Parser's available are:
\itemize{
\item{BedParser}
\item{ANNParser}
\item{BroadProjParser}
\item{BedParser}
\item{NarrowPeakParser}
\item{RnaSeqParser}
\item{CustomParser.}
}
Default is CustomParser.}

\item{is_local}{logical value indicating local or remote dataset}

\item{is_GMQL}{logical value indicating if is a GMQL dataset or not}

\item{samples}{GrangesList}
}
\value{
DataSet class object. It contains the value to use as input 
for the subsequent GMQL function
}
\description{
Read a GMQL dataset or any other folder containig some homogenus sample
from disk, saving in Scala memory that can be referenced in R
Also used to read a repository dataset in case of remote processing.

Read a GrangesList saving in scala memory that can be referenced in R
}
\details{
Normally a GMQL dataset contains an XML schema file that contains
name of column header. (e.g chr, start, stop, strand)
The CustomParser read this XML schema; 
if you already know what kind of schema your files are, use one of the 
parser defined without reading any XML schema
}
\examples{

## read local dataset with CustomParser
init_gmql()
test_path <- system.file("example", "DATASET", package = "RGMQL")
r = read_dataset(test_path)

\dontrun{

## read local dataset with other Parser
init_gmql()
test_path <- system.file("example", "DATASET", package = "RGMQL")
r = read_dataset(test_path,"ANNParser")

## read remote public dataset stored into GMQL system repository 

r2 = read_dataset("public.HG19_TCGA_dnaseq",is_local = FALSE)

}
}
