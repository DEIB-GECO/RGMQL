% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Order.R
\docType{methods}
\name{sort,GMQLDataset-method}
\alias{sort,GMQLDataset-method}
\alias{sort-method}
\title{GMQL operation: ORDER}
\usage{
\S4method{sort}{GMQLDataset}(x, decreasing = FALSE,
  metadata_ordering = NULL, regions_ordering = NULL, fetch_opt = NULL,
  num_fetch = 0, reg_fetch_opt = NULL, reg_num_fetch = 0)
}
\arguments{
\item{x}{GMQLDataset class object}

\item{decreasing}{logical value indicating the sorting for both metadata
and regions.
if you define \emph{metadata_ordering} or \emph{regions_ordering} 
defyinig order objects, this value is discarded}

\item{metadata_ordering}{list of order objects where every object 
contains the name of metadata.
The ORDER's available are: \code{\link{ASC}}, \code{\link{DESC}}
Every condition accepts only one string value. (e.g. ASC("cell_type") )}

\item{regions_ordering}{list of ORDER objects where every object contains 
the name of region schema value.
The ORDER's available are: \code{\link{ASC}}, \code{\link{DESC}}.
Every condition accepts only one string value. (e.g. DESC("pvalue") )}

\item{fetch_opt}{string indicating the option used to fetch the 
first k sample:
\itemize{
\item{mtop: it fetch the first k sample}
\item{mtopp: it fetch the first k sample in each group.}
\item{mtopg: it fetch the percentage of sample.}
}
if NULL, \emph{num_fetch} is not considered}

\item{num_fetch}{integer value identifying the number of region to fetch
by default is 0, that's means all sample are fetched
s}

\item{reg_fetch_opt}{string indicating the option used to fetch the 
first k regions:
\itemize{
\item{rtop: it fetch the first k regions.}
\item{rtopp: it fetch the first k regions in each group.}
\item{rtopg: it fetch the percentage of regions.}
}
if NULL, \emph{reg_num_fetch} is not considered}

\item{reg_num_fetch}{integer value identifying the number of region to fetch
by default is 0, that's means all regions are fetched}
}
\value{
DataSet class object. It contains the value to use as input 
for the subsequent GMQL function
}
\description{
It is used to order either samples or sample regions or both, according to 
a set of metadata and/or region attributes, and/or region coordinates.
Order can be specified as ascending / descending for every attribute
The number of samples and their regions remain the same 
(unless mtop/rtop parameters specified) but a new ordering metadata 
and/or region attribute is added.
Sorted samples or regions have a new attribute "order", 
added to either metadata, or regions, or both of them as specified in input
The input mtop = k and rtop = m extracts the first k samples 
and m regions respectively, the clause mtopg = k and rtopg = m 
performs grouping operation, grouping by identical values 
of ordering attributes and then selects the first k samples 
or regions of each group
}
\examples{

## It orders the samples according to the Region_count metadata attribute 
## and takes the two samples that have the highest count. 

init_gmql()
test_path <- system.file("example","DATASET",package = "RGMQL")
r = read_dataset(test_path)
o = sort(r,TRUE, c("Region_Count"),fetch_opt= "mtop",num_fetch = 2)


\dontrun{

## the same result is obtained with using GMQL-syntax like:
## in this case decreasing parameter TRUE is not considerd
o = sort(r,TRUE, c(DESC("Region_Count")), fetch_opt = "mtop", 
num_fetch = 2)

}

}
