% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Cover.R
\name{flat}
\alias{flat}
\title{GMQL Operation: FLAT}
\usage{
flat(input_data, minAcc, maxAcc, groupBy = NULL, aggregates = NULL)
}
\arguments{
\item{input_data}{returned object from any GMQL function}

\item{minAcc}{minimum number of overlapping regions to be considered during execution
normally is a single integer number, declared also as string.
minAcc accept also special keyword: ALL
ALL sets the minimum to the number of samples in the input dataset}

\item{maxAcc}{maximum number of overlapping regions to be considered during execution
normally is a single integer number, declared also as string.
maxAcc accept also special keyword: ALL and ANY
ALL sets the maximum to the number of samples in the input dataset
ANY acts as a wildcard, consider all areas defined to any amount of overlapping}

\item{groupBy}{a vector of strings specifying grouping criteria}

\item{aggregates}{a list of element in the form key = 'function_aggregate'.
'function_aggregate' is an object of OPERATOR class
The aggregate functions available are: MIN, MAX, SUM, BAG, AVG, COUNT, MEDIAN
Every operator accepts a string value, except for COUNT that cannot have a value.
Argument of 'function_aggregate' must exist as region attribute
Two style are allowed:
\itemize{
\item list of key-value pairs: e.g. sum = SUM("pvalue")
\item list of values: e.g. SUM("pvalue")
}
"mixed style" is not allowed}
}
\value{
DAGgraph class object. It contains the value associated to the graph used 
as input for the subsequent GMQL function
}
\description{
returns the contiguous region that starts from the first end and stops at
the last end of the regions which would contribute to each region of the COVER
}
\examples{

### This GMQL statement computes the result grouping the input \\emph{exp} samples by 
the values of their \\emph{cell} metadata attribute, thus one output \\emph{res} sample 
is generated for each cell type. 
Output regions are produced by concatenating all regions which would have been used 
to construct a COVER(2,4) statement on the same dataset; 

initGMQL("gtf")
test_path <- system.file("example","DATA_SET_VAR_GTF",package = "GMQL")
exp = read(test_path)
res = flat(input_data = exp,2,4, c("cell"))

}
\references{
\url{http://www.bioinformatics.deib.polimi.it/genomic_computing/GMQL/doc/GMQLUserTutorial.pdf}
}
\seealso{
\code{\link{summit}} \code{\link{cover}} \code{\link{histogram}}
}
