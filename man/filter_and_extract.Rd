% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filter-extract-function.R
\name{filter_and_extract}
\alias{filter_and_extract}
\title{Filter and extract function}
\usage{
filter_and_extract(data, metadata = NULL, metadata_prefix = NULL,
  regions = NULL, suffix = "antibody_target")
}
\arguments{
\item{data}{string GMQL dataset folder path or GRangesList
object}

\item{metadata}{vector of strings containing names of metadata attributes
to be searched for in metadata files.
Data will be extracted if at least one condition is satisfied:
this condition is logically "ANDed" with prefix filtering (see below)
if NULL no filtering action occures
(i.e every sample is taken for region filtering)}

\item{metadata_prefix}{vector of strings that will filter metadata
containing rispectively every element of this vector.
number of element in both vector must match}

\item{regions}{vector of strings that extracts only region attribute 
specified; if NULL no regions attribute is taken and the output is only 
GRanges made up by the region coordinate attributes 
(seqnames, start, end, strand)}

\item{suffix}{name for each metadata column of GRanges. by default is the 
"antibody_target". This string is taken from sample metadata file or from
metadata() associated. If not present, the column name is the name of 
selected regions}
}
\value{
Granges with selected regions (if any) in elementMetadata
}
\description{
This function lets user to create a new GRangesList with fixed information:
seqnames, ranges and strand, and a variable part made up by the regions
defined as input. The metadata and metadata_prefix are used to filter 
the data and choose only the samples that match at least one metdatata 
with its prefix. The input regions are shown for each sample obtained 
from filtering.
}
\details{
This function works only with datatset or GRangesList that has the same
information about regions attribute (but of course different value)
In case of Grangeslist data input the function will search for metadata
into metadata() function associated to Grangeslist.
}
\examples{

test_path <- system.file("example", "DATASET", package = "RGMQL")
filter_and_extract(test_path,regions = c("pvalue", "peak"))

grl = import_gmql(test_path, TRUE)
filter_and_extract(grl, regions = c("pvalue", "peak"))


}
