% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gmql_project.R
\docType{methods}
\name{select}
\alias{select}
\alias{select,GMQLDataset-method}
\title{Method select}
\usage{
\S4method{select}{GMQLDataset}(.data, metadata = NULL,
  metadata_update = NULL, all_but_meta = FALSE, regions = NULL,
  regions_update = NULL, all_but_reg = FALSE)
}
\arguments{
\item{.data}{GMQLDataset class object}

\item{metadata}{vector of string made up by metadata attribute}

\item{metadata_update}{list of updating rules in the form of 
key = value generating new metadata.
To specify the new values, the following options are available:
\itemize{
\item{All aggregation functions already defined by AGGREGATES object}
\item{All basic mathematical operations (+, -, *, /), including parenthesis}
\item{SQRT, META, NIL constructor object defined by OPERATOR object}
}}

\item{all_but_meta}{logical value indicating which metadata 
you want to exclude; If FALSE only the metadata you choose is kept 
in the output of the project operation, if TRUE the metadata 
are all except ones include in region parameter.
if metadata is not defined \emph{all_but_meta} is not considerd.}

\item{regions}{vector of string made up by schema field attribute}

\item{regions_update}{list of updating rules in the form of 
key = value generating new genomic region attributes.
To specify the new values, the following options are available:
\itemize{
\item{All aggregation functions already defined by AGGREGATES object}
\item{All basic mathematical operations (+, -, *, /), including parenthesis}
\item{SQRT, META, NIL constructor object defined by OPERATOR object}
}}

\item{all_but_reg}{logical value indicating which schema field attribute 
you want to exclude; if FALSE only the regions you choose is kept 
in the output of the project operation, if TRUE the schema region 
are all except ones include in region parameter.
if regions is not defined \emph{all_but_reg} is not considerd.}
}
\value{
GMQLDataset object. It contains the value to use as input 
for the subsequent GMQLDataset method
}
\description{
Wrapper to GMQL PROJECT operator

It creates, from an existing dataset, a new dataset with all 
the samples from input dataset, but keeping for each sample in the input 
dataset only those metadata and/or region attributes expressed.
Region coordinates and values of the remaining metadata remain equal to 
those in the input dataset. It allows to:
\itemize{
\item{Remove existing metadata and/or region attributes from a dataset}
\item{Update new metadata and/or region attributes in the result}
}
}
\examples{

## It creates a new dataset called CTCF_NORM_SCORE by preserving all 
## region attributes apart from score, and creating a new region attribute 
## called new_score by dividing the existing score value of each region 
## by 1000.0 and incrementing it by 100.
## It also generates, for each sample of the new dataset, 
## a new metadata attribute called normalized with value 1, 
## which can be used in future selections.

init_gmql()
test_path <- system.file("example", "DATASET", package = "RGMQL")
input = read_dataset(test_path)
CTCF_NORM_SCORE = select(input, metadata_update = list(normalized = 1), 
regions_update = list(new_score = (score / 1000.0) + 100), 
regions = c("score"), all_but_reg = TRUE)


\dontrun{

## It produces an output dataset that contains the same samples 
## as the input dataset. 
## Each output sample only contains, as region attributes, 
## the four basic coordinates (chr, left, right, strand) and the specified 
## region attributes 'variant_classification' and 'variant_type', 
## and as metadata attributes only the specified ones, 
## i.e. manually_curated_tissue_status and manually_curated_tumor_tag.

init_gmql()
test_path <- system.file("example", "DATASET", package = "RGMQL")
DS_in = read_dataset(test_path)
DS_out = select(DS_in, regions = c("variant_classification", 
"variant_type"), metadata = c("manually_curated_tissue_status", 
"manually_curated_tumor_tag"))

}

}
