% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gmql_select.R
\name{semijoin}
\alias{semijoin}
\title{Semijoin condtion}
\usage{
semijoin(.data, not_in = FALSE, groupBy)
}
\arguments{
\item{.data}{GMQLDataset class object}

\item{not_in}{logical value: TRUE => for a given sample of input dataset
".data" in \code{\link{filter}} method if and only if there exists at 
least one sample in dataset 'data' with metadata attributes defined 
in groupBy and these attributes of 'data' have at least one value in 
common with the same attributes defined in one sample of '.data'
FALSE => semijoin condition is evaluated accordingly.}

\item{groupBy}{\code{\link{condition_evaluation}} function to support 
methods with groupBy or JoinBy input paramter}
}
\value{
semijoin condition as list
}
\description{
This function is used as support to the filter method to define 
semijoin conditions on metadata
}
\examples{

## These statements initializes and runs the GMQL server for local execution 
## and creation of results on disk. Then, with system.file() it defines 
## the path to the folders "DATASET" and "DATASET_GDM" in the subdirectory 
## "example" of the package "RGMQL" and opens such folders as a GMQL dataset 
## named "data" and "join_data" respectively

init_gmql()
test_path <- system.file("example", "DATASET", package = "RGMQL")
test_path2 <- system.file("example", "DATASET_GDM", package = "RGMQL")
data <- read_GMQL(test_path)
join_data <-  read_GMQL(test_path2)

# It creates a new dataset called 'jun_tf' by selecting those samples and 
# their regions from the existing 'data' dataset such that:
# Each output sample has a metadata attribute called antibody_target 
# with value JUN.
# Each output sample also has not a metadata attribute called "cell" 
# that has the same value of at least one of the values that a metadata 
# attribute equally called cell has in at least one sample 
# of the 'join_data' dataset.
# For each sample satisfying previous conditions, only its regions that 
# have a region attribute called pValue with the associated value 
# less than 0.01 are conserved in output

jun_tf <- filter(data, antibody_target == "JUN", pvalue < 0.01, 
semijoin(join_data, TRUE, conds("cell")))

}
