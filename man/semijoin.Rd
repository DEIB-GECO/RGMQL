% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gmql_select.R
\name{semijoin}
\alias{semijoin}
\title{Semijoin Condtion}
\usage{
semijoin(data, not_in = FALSE, groupBy = NULL)
}
\arguments{
\item{data}{GMQLDataset class object}

\item{not_in}{logical value: T => semijoin is perfomed 
considering semi_join NOT IN semi_join_dataset, F => semijoin is performed 
considering semi_join IN semi_join_dataset}

\item{groupBy}{it define condition evaluation on metadata.
\itemize{
\item{\code{\link{FN}}: Fullname evaluation, two attributes match 
if they both end with value and, if they have a further prefixes,
the two prefix sequence are identical}
\item{\code{\link{EX}}: Exact evaluation, only attributes exactly 
as value will match; no further prefixes are allowed. }
\item{\code{\link{DF}}: Default evaluation, the two attributes match 
if both end with value.}
}}
}
\value{
semijoin condition as list
}
\description{
This function is use as support to filter method to define 
semijoin conditions on metadata
}
\examples{

# It creates a new dataset called 'jun_tf' by selecting those samples and 
# their regions from the existing 'data' dataset such that:
# Each output sample has a metadata attribute called antibody_target 
# with value JUN.
# Each output sample also has not a metadata attribute called "cell" 
# that has the same value of at least one of the values that a metadata 
# attribute equally called cell has in at least one sample 
# of the 'join_data' dataset.
# For each sample satisfying previous condition,only its regions that 
# have a region attribute called pValue with the associated value 
# less than 0.01 are conserved in output


init_gmql()
test_path <- system.file("example", "DATASET", package = "RGMQL")
test_path2 <- system.file("example", "DATASET_GDM", package = "RGMQL")
data <- read_dataset(test_path)
join_data <-  read_dataset(test_path2)
jun_tf <- filter(data,NULL,NULL, semijoin(join_data, TRUE, 
list(DF("cell"))))

}
