% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Cover.R
\name{summit}
\alias{summit}
\title{GMQL Operation: SUMMIT}
\usage{
summit(input_data, minAcc, maxAcc, groupBy = NULL, aggregates = NULL)
}
\arguments{
\item{input_data}{returned object from any GMQL function}

\item{minAcc}{minimum number of overlapping regions to be considered during execution
normally is a single integer number, declared also as string.
minAcc accept also special keyword: ALL
ALL sets the minimum to the number of samples in the input dataset}

\item{maxAcc}{maximum number of overlapping regions to be considered during execution
normally is a single integer number, declared also as string.
maxAcc accept also special keyword: ALL and ANY
ALL sets the maximum to the number of samples in the input dataset
ANY acts as a wildcard, consider all areas defined to any amount of overlapping}

\item{groupBy}{a vector of strings specifying grouping criteria}

\item{aggregates}{a list of element in the form key = 'function_aggregate'.
'function_aggregate' is an object of OPERATOR class
The aggregate functions available are: MIN, MAX, SUM, BAG, AVG, COUNT, MEDIAN
Every operator accepts a string value, except for COUNT that cannot have a value.
Argument of 'function_aggregate' must exist as region attribute
Two style are allowed:
\itemize{
\item list of key-value pairs: e.g. sum = SUM("pvalue")
\item list of values: e.g. SUM("pvalue")
}
"mixed style" is not allowed}
}
\value{
DAGgraph class object. It contains the value associated to the graph used 
as input for the subsequent GMQL function
}
\description{
returns regions that start from a position
where the number of intersecting regions is not increasing afterwards and stops
at a position where either the number of intersecting regions decreases,
or it violates the max accumulation index).
}
\examples{

### This GMQL statement computes the result grouping the input \\emph{exp} samples by the values 
of their \\emph{cell} metadata attribute, thus one output \\emph{res} sample is generated 
for each cell type.
Output regions are produced by extracting the highest accumulation overlapping 
(sub)regions according to the methodologies described above;


initGMQL("gtf")
test_path <- system.file("example","DATA_SET_VAR_GTF",package = "GMQL")
exp = read(test_path)
res = summit(input_data = exp,2,4, c("cell"))

}
\references{
\url{http://www.bioinformatics.deib.polimi.it/genomic_computing/GMQL/doc/GMQLUserTutorial.pdf}
}
\seealso{
\code{\link{flat}} \code{\link{cover}} \code{\link{histogram}}
}
