% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GMQLDataset-class.R, R/Select.R
\docType{methods}
\name{filter}
\alias{filter}
\alias{filter,GMQLDataset-method}
\alias{filter,}
\alias{filter-method}
\title{Method filter}
\usage{
filter(.data, m_predicate = NULL, r_predicate = NULL, semijoin = NULL,
  ...)

\S4method{filter}{GMQLDataset}(.data, m_predicate = NULL,
  r_predicate = NULL, semijoin = NULL, ...)
}
\arguments{
\item{.data}{GMQLDataset class object}

\item{m_predicate}{logical predicate made up by R logical operation 
on metadata attribute. 
Only !, |, ||, &, && are admitted.}

\item{r_predicate}{logical predicate made up by R logical operation 
on chema region values. 
Only !, |, ||, &, && are admitted.}

\item{semijoin}{\code{\link{semijoin}} function 
to define filter method with semijoin condition (see examples).}

\item{...}{Additional arguments for use in specific methods.}
}
\value{
GMQLDataset class object. It contains the value to use as input 
for the subsequent GMQL function
}
\description{
Wrapper to GMQL select function

It returns all the samples satisfying the predicate on metadata.
If regions are specified, returns regions satisfying the predicate 
on regions.
If semijoin clauses are specified they are applied, too.
When semijoin is defined, it extracts those samples containing all metadata 
attribute defined in semijoin clause with at least one metadata value 
in common with semi join dataset.
If no metadata in common between input dataset and semi join dataset, 
no sample is extracted.
}
\examples{

## It selects from input data samples of patients younger than 70 years old, 
## based on filtering on sample metadata attribute Patient_age

init_gmql()
test_path <- system.file("example", "DATASET", package = "RGMQL")
input <- read_dataset(test_path)
s <- filter(input, Patient_age < 70)

\dontrun{

It creates a new dataset called 'jun_tf' by selecting those samples and 
their regions from the existing 'data' dataset such that:
Each output sample has a metadata attribute called antibody_target 
with value JUN.
Each output sample also has not a metadata attribute called "cell" 
that has the same value of at least one of the values that a metadata 
attribute equally called cell has in at least one sample 
of the 'join_data' dataset.
For each sample satisfying previous condition,only its regions that 
have a region attribute called pValue with the associated value 
less than 0.01 are conserved in output


init_gmql()
test_path <- system.file("example", "DATASET", package = "RGMQL")
test_path2 <- system.file("example", "DATASET_GDM", package = "RGMQL")
data <- read_dataset(test_path)
join_data <-  read_dataset(test_path2)
jun_tf <- filter(data, antibody_target == 'JUN', pValue < 0.01, 
semijoin(join_data, TRUE, DF("cell")))

}

}
