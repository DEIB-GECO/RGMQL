% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/S3Operator.R
\name{META}
\alias{META}
\alias{NIL}
\alias{SQRT}
\title{OPERATOR object class constructor}
\usage{
META(value, type = NULL)

NIL(value)

SQRT(value)
}
\arguments{
\item{value}{string identifying name of metadata attribute or region 
attribute}

\item{type}{string identifying the type of the attribute value
must be: integer, double or string}
}
\value{
operator object
}
\description{
This class constructor is used to create instances of OPERATOR object,
to be used in GMQL functions that require operator on value.
}
\details{
\itemize{
\item{META: It prepared input parameter to be passed to library function 
meta, performing all the type conversion needed}
\item{SQRT: It prepared input parameter to be passed to library function 
sqrt, performing all the type conversion needed}
\item{NIL: It prepared input parameter to be passed to library function 
null, performing all the type conversion needed}
}
}
\examples{

init_gmql()
test_path <- system.file("example", "DATASET", package = "RGMQL")
exp = read_dataset(test_path)

## allows to select, in all input sample, all those regions for which the 
## region attribute score has a value which is greater than the metadata 
## attribute value "avg_score" in their sample.

data = filter(exp, r_predicate = score > META("avg_score"))

## It define a new numeric region attribute with "null" value. 
## The syntax for creating a new attribute with null value is 
## attribute_name = NULL(TYPE), where type may be INTEGER or DOUBLE.

out = select(exp, regions_update = list(signal = NIL("INTEGER"), 
pvalue = NIL("DOUBLE")))

## This statement allows to build an output dataset out such that all 
## the samples from the input dataset exp are conserved, 
## as well as their region attributes (and their values) 
## and their metadata attributes (and their values). 
## The new metadata attribute concSq is added to all output samples 
## with value correspondent to the mathematical squared root 
## of the pre-existing metadata attribute concentration.

init_gmql()
test_path <- system.file("example", "DATASET", package = "RGMQL")
exp = read_dataset(test_path)
out = select(exp, metadata_update = list(concSq = SQRT("concentration")))

}
